// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO users (
  username, bio, avatar,phone,email,password,status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, username, bio, avatar, phone, email, password, status
`

type CreateAuthorParams struct {
	Username string
	Bio      sql.NullString
	Avatar   sql.NullString
	Phone    sql.NullString
	Email    sql.NullString
	Password sql.NullString
	Status   sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.Username,
		arg.Bio,
		arg.Avatar,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Status,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Status,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM users
ORDER BY id
`

func (q *Queries) ListAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Bio,
			&i.Avatar,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
