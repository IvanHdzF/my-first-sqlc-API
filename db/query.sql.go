// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, bio, avatar,phone,email,password,status
) 
SELECT 
	username,
	bio,
	avatar,
	phone,
	email,
	password,
	status
FROM json_populate_recordset(null::users, $1) RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, payload json.RawMessage) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, payload)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Bio,
		&i.Avatar,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Status,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Bio,
			&i.Avatar,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE USERS
SET 
	username = $2,
	bio=$3,
	avatar=$4,
	phone=$5,
	email=$6,
	password=$7,
	status=$8
WHERE ID=$1
`

type UpdateUserParams struct {
	ID       int32
	Username string
	Bio      sql.NullString
	Avatar   sql.NullString
	Phone    sql.NullString
	Email    sql.NullString
	Password sql.NullString
	Status   sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Bio,
		arg.Avatar,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Status,
	)
	return err
}
