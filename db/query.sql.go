// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, bio, avatar,phone,email,password,status
) 
SELECT 
	username,
	bio,
	avatar,
	phone,
	email,
	password,
	status
FROM jsonb_populate_record(null::users, $1) RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, payload json.RawMessage) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, payload)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE users.id=(SELECT id FROM jsonb_populate_record(null::users, $1) AS jsonRequest) 
RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, payload json.RawMessage) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, payload)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
select jsonb_build_object(
	'id',id, 
	'username',username, 
	'avatar',avatar,
	'phone',phone,
	'email',email,
	'password',password,
	'status',status)
from (
	SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM USERS WHERE ID=$1
)AS selectedUser
`

func (q *Queries) GetUser(ctx context.Context, id int32) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var jsonb_build_object json.RawMessage
	err := row.Scan(&jsonb_build_object)
	return jsonb_build_object, err
}

const listUsers = `-- name: ListUsers :one
select jsonb_agg(jsonb_build_object(
	'id',id, 
	'username',username, 
	'avatar',avatar,
	'phone',phone,
	'email',email,
	'password',password,
	'status',status))
from (
	SELECT id, created_at, updated_at, username, bio, avatar, phone, email, password, status FROM USERS ORDER BY id ASC
)AS sortedUser
`

func (q *Queries) ListUsers(ctx context.Context) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, listUsers)
	var jsonb_agg json.RawMessage
	err := row.Scan(&jsonb_agg)
	return jsonb_agg, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE USERS
SET (username,bio,avatar,phone,email,password,status)= (SELECT username,bio,avatar,phone,email,password,status 
														FROM jsonb_populate_record(null::users, $1))
WHERE users.id=$2
`

type UpdateUserParams struct {
	JsonbPopulateRecord json.RawMessage
	ID                  int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.JsonbPopulateRecord, arg.ID)
	return err
}

const getUserPosts = `-- name: getUserPosts :many
SELECT username, url,caption
FROM posts AS p
JOIN users AS u ON p.user_id=u.id
WHERE p.id=(SELECT id FROM jsonb_populate_record(null::users, $1))
`

type getUserPostsRow struct {
	Username string
	Url      string
	Caption  sql.NullString
}

func (q *Queries) GetUserPosts(ctx context.Context, payload json.RawMessage) ([]getUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, payload)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getUserPostsRow
	for rows.Next() {
		var i getUserPostsRow
		if err := rows.Scan(&i.Username, &i.Url, &i.Caption); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
